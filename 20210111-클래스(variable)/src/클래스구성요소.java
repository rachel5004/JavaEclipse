/*
 *    2021. 01 .11 => 클래스 구성요소
 *    ================================= 
 *    1. 변수 (데이터형) => , 배열
 *    ==========
 *    2. 연산자 
 *    3. 제어문 
 *    ==========  기능 (메소드)
 *    ================================= 클래스
 *    
 *    1) 클래스의 구성 
 *        = 변수 
 *          1. 지역변수 : 지금까지 사용한 변수 (블럭변수 {}를 벗어나면 사라지는 변수:메모리에서 관리)
 *             => 메소드 안에서만 사용이 가능 
 *          
 *          전역변수는 다른 클래스에서도 사용이 가능 
 *          ===========================================================================
 *          2. 전역변수 : 클래스가 메모리에서 사라지기전까지 사용하는 변수 (클래스 전체에세 사용하는 변수)
 *             =======
 *              인스턴스변수 : 클래스를 저장할때마다 따로 생기는 변수 
 *              공유변수(정적변수) : 한개만 생성되는 변수 
 *        =============================================================================
 *        class : 한개에 대한 정보 
 *                =============
 *                학생 => 1명 => 메모리에 여러개 저장 
 *                영화 => 1개 => 메모리에 여러개 저장 
 *        ====================================
 *          ======================
 *           변수 (여러개 사용이 가능) => 일반 데이터형 , (클래스 , 배열 => 관련된 데이터 여러개를 모아서 관리)
 *          ======================
 *          
 *          설정 변수 활용
 *          =====================
 *           메소드 (기능별로 여러개 생성이 가능) 
 *          =====================
 *          
 *          클래스를 저장할때 변수에 대한 초기화 담당(생성자)
 *          =====================
 *           생성자 : 클래스를 메모리에 저장할때마다 호출하는 메소드
 *           => 클래스명과 동일
 *           Scanner scan=new Scanner()
 *                        === ========= 생성자 
 *          =====================
 *        
 *        ====================================
 *        = 메소드 
 *        = 생성자 
 *        예) 네트워크 => 채팅 
 *           ==============
 *           기억해야 되는 변수 => 서버 IP , 본인 ID => 프로그램 종료시까지 사라지지 않는 변수(전역변수)
 *           기능 : 문자 전송 , 서버에서 들어오는 값 , 쪽지보내기 , 방만들기 ... (메소드) 
 *           클래스 => 사용자 정의 데이터형 (기본데이터형:정수,실수,논리..)
 *                   ================
 *                   데이터저장(메모리) 크기 => 직접 제작하기에 JVM이 알 수가 없다 
 *                   확인후에 메모리 크기를 결정 
 *                   ===================== new ==> 메모리 주소를 이용한다 (참조변수)
 *    2) 클래스 개념
 *    3) 객체지향 
 *       ======
 *        3대 특성 
 *        =======
 *         = 캡슐화 : 데이터 보호(보안) => 접근지정어 
 *         = 상속(is-a) , 포함(has-a) : 있는 그대로 사용  =====> 재사용기법  
 *           =========   ==========
 *           변경해서 사용이 가능  
 *         = 다형성 : 추가 (오버로딩), 변경(수정) = 오버라이딩 
 *    4) 클래스의 종류 
 *       = 일반 클래스 
 *       = 추상 클래스
 *       = 인터페이스 
 *       = 내부 클래스 
 *   =================================================================
 *   프로그램 : 비정상 종료를 하지 않게 만든다 (미리 오류를 예측) : 예외처리 
 *   라이브러리 
 *   =================================================================
 *   조립 : 사용자정의 클래스 + 라이브러리 => 네트워크,데이터베이스
 *                                            ========= 오라클+JDBC
 *    
 *    
 */
public class 클래스구성요소 {
    String number;
    String image;
    static int width,height;// 공통으로 사용되는 메모리 공간 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        // 메모리에 따로 저장 => 인스턴스 변수 
		클래스구성요소 a=new 클래스구성요소();
		//               =============== 생성자 (변수의 초기화)
		//  a=객체,인스턴스 ==> a가 가지고 있는 변수 (인스턴스,객체변수) =>
		/*
		 *     ==a==        
		 *      100                             
		 *     =====    ↖
		 *                 100=============
		 *                    
		 *                     -----------
		 *                        null     number  ==> a.number
		 *                     ----------- 
		 *                        null     image   ==> a.image
		 *                     -----------
		 *                          0      width   ==> a.width
		 *                     -----------
		 *                          0      height  ==> a.heigth
		 *                     -----------
	     
		 *                    ==============
		 */
		클래스구성요소 b=new 클래스구성요소();
	        //  a=객체,인스턴스 ==> a가 가지고 있는 변수 (인스턴스,객체변수) =>
			/*
			 *     ==b==        
			 *      200                             
			 *     =====    ↖
			 *                 200=============
			 *                    
			 *                     -----------
			 *                                 number  ==> b.number
			 *                     ----------- 
			 *                                 image   ==> b.image
			 *                     -----------
			 *                                 width   ==> b.width
			 *                     -----------
			 *                                 height  ==> b.heigth
			 *                     -----------
		     
			 *                    ==============
			 */
		클래스구성요소 c=new 클래스구성요소();
	        //  a=객체,인스턴스 ==> a가 가지고 있는 변수 (인스턴스,객체변수) =>
			/*
			 *     ==c==        
			 *      300                             
			 *     =====    ↖
			 *                 300=============
			 *                    
			 *                     -----------
			 *                                 number  ==> c.number
			 *                     ----------- 
			 *                                 image   ==> c.image
			 *                     -----------
			 *                                 width   ==> c.width
			 *                     -----------
			 *                                 height  ==> c.heigth
			 *                     -----------
		     
			 *                    ==============
			 */
		클래스구성요소 d=new 클래스구성요소();
	        //  a=객체,인스턴스 ==> a가 가지고 있는 변수 (인스턴스,객체변수) =>
			/*
			 *     ==d==        
			 *      400                             
			 *     =====    ↖
			 *                 400=============
			 *                    
			 *                     -----------
			 *                                 number  ==> d.number
			 *                     ----------- 
			 *                                 image   ==> d.image
			 *                     -----------
			 *                                 width   ==> d.width
			 *                     -----------
			 *                                 height  ==> d.heigth
			 *                     -----------
		     
			 *                    ==============
			 */
		
		// 변수 => 사용 => 저장된 메모리 접근시에는 반드시 (.:메모리 접근 연산자)
		a.number="A";
		a.image="♠";
		a.width=350;
		a.height=450;
		
		b.number="A";
		b.image="♥";
		b.width=350;
		b.height=450;
		
		c.number="A";
		c.image="♧";
		c.width=350;
		c.height=450;
		
		d.number="A";
		d.image="◈";
		d.width=350;
		d.height=450;
		// 메모리 공간이 따로 생긴다 
		System.out.println("======= a가 가지고 있는 변수값 출력 =======");
		System.out.println("숫자:"+a.number);
		System.out.println("이미지:"+a.image);
		// 변경 
		//a.width=300;
		//a.height=400;
		클래스구성요소.width=250;
		클래스구성요소.height=300;
		// 클래스변수 , 공유변수 , 공통변수 => static : 메모리 공간을 1개만 가지고 있다 
		System.out.println("width:"+a.width);
		System.out.println("height:"+a.height);
		
		System.out.println("======= b가 가지고 있는 변수값 출력 =======");
		System.out.println("숫자:"+b.number);
		System.out.println("이미지:"+b.image);
		System.out.println("width:"+b.width);
		System.out.println("height:"+b.height);
		
		System.out.println("======= c가 가지고 있는 변수값 출력 =======");
		System.out.println("숫자:"+c.number);
		System.out.println("이미지:"+c.image);
		System.out.println("width:"+c.width);
		System.out.println("height:"+c.height);
		
		System.out.println("======= d가 가지고 있는 변수값 출력 =======");
		System.out.println("숫자:"+d.number);
		System.out.println("이미지:"+d.image);
		System.out.println("width:"+d.width);
		System.out.println("height:"+d.height);
	}

}














