/*
 *    클래스 구성요소 
 *    ============
 *    변수,메소드,생성자
 *    1) 생성자 : 멤버변수에 대한 초기화 
 *       멤버변수 
 *       ====== 기본 디폴트 값 설정 
 *       class A
 *       {
 *           int a;      ====> 0
 *           String name;====> null (모든 클래스 : null)
 *           double d;   ====> 0.0
 *           boolean b;  ====> false 
 *       }
 *       1. 초기화 (명시적 선언)
 *       class A
 *       {
 *           int a=10;
 *           String name="홍길동";
 *       }
 *       *** 클래스는 선언 가능 (선언과 동시 값을 설정) ==> 선언
 *       ===========================================================
 *       *** 외부에서 데이터를 가지고 오는 경우 (자동 로그인 => 파일에 읽기 ini)
 *       *** 연산처리 , 제어문 
 *       ================================= 구현 (클래스블럭에서 사용이 불가능)
 *        *** 메소드를 이용해서 초기화 
 *        *** 자동으로 호출 가능 1)생성자 , 2) 초기화 블럭
 *        
 *      생성자 , this , 접근지정어 (캡슐화)
 *      ==============================
 *      생성자 
 *      class A
 *      {
 *         A(){}// 필요할때만 생성 
 *      }
 *      A a=new A();
 *              === 생성자 
 *       1) 역할 
 *          = 멤버변수에 대한 초기화 담당 
 *          = 메모리 생성할때 반드시 호출된 메소드 
 *          = 모든 클래스에는 생성자가 1개 이상 존재 
 *            =========
 *            컴파일러가 생성자가 없는 경우에 자동으로 생성자 만들어준다
 *                                     =============
 *                                     디폴트 생성자 (매개변수 없는 함수)
 *            자동 생성 
 *            ========
 *            1. import java.lang.*;
 *                      ============  String ,System,Math
 *            2. 메소드 => void를 사용하게 되면 return을 생략
 *            3. 생성자가 없는 경우에 자동으로 추가
 *            ============================================
 *            4. 모든 클래스는 Object로부터 상속을 받는다 
 *            5. 모든 클래스는 예외처리를 하고 있다 
 *            ============================================
 *            
 *            *** 자바에서 자동하는 라이브러리를 사용시 반드시 import를 사용해서 읽어 온다
 *            *** 모든 메소드는 메소드 종료시 반드시 return을 사용한다 
 *            *** 모든 클래스는 생성자를 가지고 있다 
 *            *** 생성자는 필요시에만 만들어서 사용
 *            
 *            class A
 *            {
 *               int a;
 *               a=10;(X) => 생성자 (값을 변경)
 *               int a=10;(O)
 *            }
 *            
 *            ***클래스 영역에서는 필요한 데이터 선언 
 *            ***선언된 데이터에 값을 입력할때는 반드시 메소드,생성자
 *            
 *        2) 특징 
 *           = 생성자는 반드시 클래스명과 동일하게 만든다 
 *                         =============
 *             class MainClass
 *             {
 *                MainClass(){}
 *             }
 *           = 생성자는 특수한 메소드이다 (리턴형이 존재하지 않는다)
 *             class MainClass{
 *                void MainClass(){}//일반 메소드
 *                MainClass(){}
 *             }
 *           = 생성자는 여러개를 만들어서 사용이 가능 
 *             메소드 한개의 이름을 가지고 여러개 만들어서 사용할때
 *             ========================================= 오버로딩
 *             오버로딩을 지원한다 
 *             ======  메소드명이 동일
 *                     매개변수의 데이터형이나 갯수가 다르다 
 *                     리턴형은 관계없다 
 *             class A
 *             {
 *                A(){}   ======> new A()
 *                A(int a){} ===> new A(10)
 *                A(String name){} ==> new A("Hello")
 *             }
 *             
 *            = 생성자는 호출할때 반드시 생성자앞에 new를 사용해서 호출 
 *              =====
 *               서버연결 (오라클 , 네트워크)
 *                      ====== 데이터를 영구적으로 저장하는 장소 
 *            
 *           
 */
public class MainClass {
    int a;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        // 클래스 저장 
		MainClass mc=new MainClass();
		//               =========== 생성자
		/*
		 *     stack
		 *    ==mc==
		 *      100
		 *    ======  mc.a ==> 접근시에는 반드시 .을 사용해서 접근
		 *                                   ==
		 *                                   연산자:주소 접근 연산자
		 *                   실제 데이터 저장 장소 (heap)
		 *                 100===============
		 *                     =====a=====
		 *                          0 => 생성자 
		 *                     ===========
		 *                 
		 *                    ===============  ===> 메모리 공간을 만들어준다(new)
		 */
	}

}








