/*
 *    1. 클래스 구성요소 
 *       변수 ============== 초기화(초기값설정)
 *        ============
 *        = 인스턴스변수
 *        = 클래스변수 
 *        ============ 프로그램 종료시까지 사용이 가능
 *          1) 명시적 초기화 
 *          2) 생성자 
 *          3) 초기화 블럭 
 *             {} , static{}
 *        = 지역변수 : 메소드 종료시 사라진다 
 *          1) 메소드안에서 직접 초기화 
 *          
 *      변수를 활용(가공:사용자의 요청):기능(메소드)
 *      리턴형(결과값) 메소드명(매개변수...) ****** 결과값이 없는 경우 (void)
 *      {
 *         구현 (가공) 
 *         return 결과값;
 *      }
 *      void => 데이터베이스 (추가,수정,삭제)
 *      
 *      생성자 : 변수에 대한 초기화 (명시적 초기화가 안되는 경우에 생성자에서 처리)
 *      =======
 *       1) 특징 
 *           = 클래스명과 동일 
 *           = 리턴형이 존재하지 않는다 
 *       2) 사용처
 *           = 클래스를 메모리에 저장할때 사용
 *           = 변수 초기화 담당 
 *       3) 생성자는 여러개를 만들 수 있다 (메소드명이 동일 => 여러개를 만들어서 처리 (오버로딩)
 *          * 만약에 생성자 필요없어서 제작하지 않았을때는 컴파일러가 자동으로 디폴트생성자 추가가 해준다 
 *                                                               ========= 매개변수가 없는 생성자
 *    =======================================================================================
 *    객체지향프로그램 : 문법사항이 아니다 , 권장사항 
 *    =============
 *       1. 멤버변수를 다른 클래스에서 사용할 수 없게 만든다 (은닉화) => 필요할때는 사용이 가능하게 만든다 (메소드)(캡슐화)
 *          => 데이터 보호의 목적 
 *       2. 재사용 
 *          => 변경해서 사용 : 상속 (상속내리는 클래스는 변경되지 않는다) => 중복코딩 제거 => is-a
 *          class A
 *          {
 *             int a;
 *             int b;
 *             void display(){1}
 *          }
 *                ↑
 *          class B extends A : 확장 (추가,변경)
 *                 =========
 *          {
 *             //int a;
 *             //int b;
 *             //void display(){3}
 *          }
 *          => 있는 그대로 사용 : 포함 (has-a) : 라이브러리 사용 
 *          class 컴퓨터 
 *          {
 *          }
 *          class 사람
 *          {
 *             컴퓨터 a=new 컴퓨터();
 *          }
 *          
 *        3. 기존의 클래스가 현재 프로그램에 적용이 않된다 => 적용이 될 수 있게 변경
 *                                                  ================== 오버라이딩 
 *                                               => 새로운 기능을 만든다 
 *                                                  ================== 오버로딩 
 *                                                ============================== 다형성 
 *        객체지향의 3대 특성 
 *        ===============
 *         캡슐화 , 상속 , 다형성 
 *         
 *        객체지향의 4대 특성 
 *        ===============
 *         캡슐화 , 상속 , 다형성 , 추상화 
 *         
 *         추상화 : 사물의 공통적인 특성을 모아서 관리 (클래스)
 *         
 *         학번 , 이름 , 학과 , 성적 , 학년  = 학생 
 *         시 , 분 , 초 
 *         모니터 , 본체 , 마우스 , 키보드  
 *         
 *         스프링 : 상속 (POJO) , new 연산자 사용금지 
 *         ===========================================================
 *         캡슐화 : 데이터는 은닉화 메소드를 통해서 데이터에 접근이 가능하게 만든다 
 *                ============ ============================
 *                
 *                접근지정어 
 *                자바 : private , protected , public , default (키워드가 없다)
 *        ===============================================================================
 *             자신의 클래스    같은 폴더안에 있는 클래스   다른 패키지 상속을 받은 클래스   모든 클래스
 *                               (패키지)
 *        ===============================================================================
 * private        O 
 *        ===============================================================================
 * protected      O                   O                       O
 *        ===============================================================================
 * default        O                   O
 *        ===============================================================================
 * public         O                   O                       O                   O
 *        ===============================================================================
 *        
 *              접근할 수 있는 크기 
 *              private < default < protected < public 
 *              
 *              *** 기본적으로 사용하는 방식 
 *                  ===================
 *                  =============================
 *                  1. 변수 (멤버변수) : private ============> 읽기 / 쓰기 
 *                  2. 메소드 : public                   getter / setter
 *                  ============================= 캡슐화 
 *                  3. 생성자 : public 
 *                  4. 클래스 : public 
 *        
 */
/*
 *    멤버변수 
 *     인스턴스변수 : 접근지정어 데이터형 변수명;
 *    메소드 : 접근지정어 리턴형 메소드명(매개변수)
 *    클래스 : 접근지정어 class className{}
 */
class Student
{
	// 캡슐화 (다른 클래스에서도 사용이 가능하게 만든다)
	// 이름
	private String name; // default
	// 나이
	private int age;
	// 학년
	private int year;
	// 학과
	private String 학과;
	// 전공 
	private String subject;
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getYear() {
		return year;
	}
	public void setYear(int year) {
		this.year = year;
	}
	public String get학과() {
		return 학과;
	}
	public void set학과(String 학과) {
		this.학과 = 학과;
	}
	public String getSubject() {
		return subject;
	}
	public void setSubject(String subject) {
		this.subject = subject;
	}
	
	
}
public class 접근지정어 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        Student s1=new Student();
        s1.setName("홍길동");// s1.name="홍길동"
        System.out.println(s1.getName()); // s1.name
        
	}

}




















